
╔═══════════════════════════════════════════════════════════════╗
║                                                               ║
║        🎉 7个算法可视化 - 测试清单                              ║
║                                                               ║
╚═══════════════════════════════════════════════════════════════╝


📋 测试前准备
═════════════════════════════════════════════════════

1. 确保开发服务器运行
   npm run dev

2. 访问可视化页面
   http://localhost:3000/visualizations

3. 浏览器窗口宽度 > 1024px（否则布局会垂直排列）

4. 硬刷新页面
   Windows/Linux: Ctrl + Shift + R
   Mac: Cmd + Shift + R


✅ 算法1: 线性回归（已测试通过）
═════════════════════════════════════════════════════

□ 点击"线性回归"卡片
□ 看到蓝色数据点
□ 点击"播放"
□ 红色拟合线开始移动
□ 损失值下降
□ 迭代次数增加到100
□ 调整学习率滑块
□ 点击"重置"恢复初始状态


✅ 算法2: K-Means聚类（已测试通过）
═════════════════════════════════════════════════════

□ 点击"K-Means聚类"卡片
□ 看到灰色数据点和彩色质心
□ 点击"播放"
□ 数据点变色
□ 质心移动
□ 显示"✓ 已收敛"
□ 各簇点数更新（每簇约30个点）
□ 调整K值（2-6）
□ 点击"重置"看新的聚类


✅ 算法3: 神经网络（已测试通过）
═════════════════════════════════════════════════════

□ 点击"神经网络"卡片
□ 看到完整网络结构（4层）
□ 输入层有激活值（蓝色圆圈）
□ 点击"播放"
□ 连接线逐层高亮
□ 激活值传播
□ 输出预测更新
□ 调整速度滑块
□ 点击"重置"


🆕 算法4: 决策树（新增）
═════════════════════════════════════════════════════

□ 点击"决策树"卡片
□ 看到红蓝两类数据点
□ 点击"播放"
□ 树结构逐节点生成
□ 绿色圆圈（决策节点）
□ 红/蓝圆圈（叶子节点）
□ 连接线显示树结构
□ 节点进度更新
□ 显示总节点/叶子节点/决策节点数量
□ 调整最大深度（2-4）
□ 点击"重置"看新的树


🆕 算法5: 梯度下降（新增）
═════════════════════════════════════════════════════

□ 点击"梯度下降"卡片
□ 看到等高线图
□ 红色点在起始位置(3, 3)
□ 绿色星星在最优点(1, 2)
□ 点击"播放"
□ 红色点沿蓝色路径移动
□ 橙色箭头显示梯度方向
□ 迭代次数增加
□ 梯度大小减小
□ 当前值接近最优值
□ 显示"✓ 已收敛"
□ 调整学习率观察不同路径
□ 点击"重置"


🆕 算法6: SVM（新增）
═════════════════════════════════════════════════════

□ 点击"SVM"卡片
□ 看到红蓝两类数据点
□ 点击"播放"
□ 步骤1: 初始化数据点
□ 步骤2: 绿色决策边界出现
□ 步骤3: 蓝色虚线和红色虚线（边距）
□ 步骤4: 黄色圆圈标记支持向量
□ 显示权重向量、偏置
□ 显示边距宽度
□ 显示支持向量数量
□ 显示"✓ 训练完成"
□ 调整边距参数
□ 点击"重置"


🆕 算法7: 卷积神经网络（新增）
═════════════════════════════════════════════════════

□ 点击"卷积神经网络"卡片
□ 看到输入图像（数字"5"）
□ 6层网络结构显示
□ 点击"播放"
□ 逐层激活
  - 输入图像（28×28×1）蓝色
  - 卷积1（24×24×8）绿色
  - 池化1（12×12×8）橙色
  - 卷积2（8×8×16）绿色
  - 池化2（4×4×16）橙色
  - 全连接（10类别）紫色
□ 绿色箭头连接各层
□ 层进度列表更新
□ 输出概率条形图
□ "类别5"有最高概率（绿色）
□ 显示预测结果"5"
□ 点击"重置"


🎯 全面测试
═════════════════════════════════════════════════════

□ 所有7个算法都能正常切换
□ 每个算法的动画都能播放
□ 参数调节生效
□ 重置功能正常
□ 速度调节有效
□ 没有console错误
□ Canvas绘制正常
□ 布局美观整齐
□ 文字清晰可读
□ 颜色搭配合理


🐛 常见问题排查
═════════════════════════════════════════════════════

问题: 点击卡片没反应
解决: 硬刷新页面（Ctrl + Shift + R）

问题: 左右布局变成上下
解决: 扩大浏览器窗口宽度到 > 1024px

问题: Canvas空白
解决: 
  1. 打开开发者工具（F12）
  2. 查看Console是否有错误
  3. 刷新页面
  4. 检查服务器是否运行

问题: 动画不流畅
解决:
  1. 降低动画速度
  2. 关闭其他占用资源的程序
  3. 使用Chrome浏览器


📊 性能检查
═════════════════════════════════════════════════════

□ 动画帧率流畅（> 30fps）
□ 切换算法响应快速（< 1s）
□ 参数调节即时反馈
□ 内存占用正常（< 200MB）
□ CPU占用合理（< 30%）


🎓 学习路径验证
═════════════════════════════════════════════════════

入门级:
□ 线性回归能理解梯度下降
□ K-Means能理解聚类
□ 决策树能理解分类

中级:
□ 梯度下降能理解优化
□ 神经网络能理解前向传播
□ SVM能理解最大间隔

高级:
□ CNN能理解卷积和池化


✨ 最终验收
═════════════════════════════════════════════════════

□ 所有7个算法100%可用
□ UI/UX一致性良好
□ 交互流畅自然
□ 教学目标清晰
□ 技术实现优秀
□ 代码质量高
□ 无已知bug
□ 准备好展示 🎉


═════════════════════════════════════════════════════

           测试通过后就可以投入使用了！

              恭喜完成整个平台！ 🎊

═════════════════════════════════════════════════════

